#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mpi.h>
#include <assert.h>

void Get_input(int my_rank, int comm_sz, double* a_p, double* b_p, int* n_p);
void Generate_data();

int main(void)
{
    int my_rank;
    int comm_sz;

    int data_count;
    int lower_bound;
    int upper_bound;
    int bin_count;

    int source;

    MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
    MPI_Comm_size(MPI_COMM_WORLD, &comm_sz);

    // Get_input(my_rank, comm_sz, &a, &b, &n);

    // MPI_Reduce(&local_int, &total_int, 1, MPI_DOUBLE, MPI_SUM, 0,
            // MPI_COMM_WORLD);

    if (my_rank == 0)
    {
        printf("num data points %d\n", data_count);
        printf("data\n====\n");
        /* todo: data here */
        printf("range of bins: \n");
        printf("num measurements per bin: \n");
    }

    MPI_Finalize();
    return 0;
} /* main */


void Get_input(int my_rank, int comm_sz, double* a_p, double* b_p, int* n_p)
{
    int dest;

    if (my_rank == 0)
    {
        printf("Enter a, b, and n\n");
        scanf("%lf %lf %d", a_p, b_p, n_p);
        for (dest = 1; dest < comm_sz; dest++)
        {
            MPI_Send(a_p, 1, MPI_DOUBLE, dest, 0, MPI_COMM_WORLD);
            MPI_Send(b_p, 1, MPI_DOUBLE, dest, 0, MPI_COMM_WORLD);
            MPI_Send(n_p, 1, MPI_INT, dest, 0, MPI_COMM_WORLD);
        }
    }
    else
    {
        MPI_Recv(a_p, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(b_p, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(n_p, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    }
} /* Get_input */


void Generate_data()
{
    // TODO: actual function
    double data[10] = {1.3, 2.9, 0.4, 0.3, 1.3, 4.4, 1.7, 0.4, 3.2, 0.3, 4.9,
                       2.9, 3.1, 4.4, 3.9, 0.4, 4.2, 4.5, 4.9, 0.9};
}

